{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pydantic GSheets","text":"<p>Pydantic GSheets binds Google Sheets data to typed Pydantic models. This documentation covers the public classes and functions available to build applications on top of the library.</p>"},{"location":"#contents","title":"Contents","text":"<ul> <li>Authentication</li> <li>Drive file helpers</li> <li>Worksheet interaction</li> </ul>"},{"location":"auth/","title":"Authentication","text":"<p>The authentication helpers centralize how the library obtains Google API credentials and builds service clients.</p>"},{"location":"auth/#authstrategy-protocol","title":"<code>AuthStrategy</code> Protocol","text":"<p>Protocol defining a single method:</p> <pre><code>get_credentials() -&gt; google.auth.credentials.Credentials\n</code></pre> <p>Implementations provide refreshed Google credentials.</p>"},{"location":"auth/#authmethod-enum","title":"<code>AuthMethod</code> Enum","text":"<p><code>AuthMethod</code> selects how credentials are acquired. Currently only:</p> <ul> <li><code>USER_OAUTH</code> \u2013 interactive OAuth flow for end users. If you'd like to learn how to use this authentication method, please refer to the Google sheets OAuth documentation.</li> </ul>"},{"location":"auth/#authconfig","title":"<code>AuthConfig</code>","text":"<p>Pydantic model configuring authentication.</p> Field Type Description <code>method</code> <code>AuthMethod</code> Strategy used to obtain credentials. <code>scopes</code> <code>Sequence[str]</code> OAuth scopes requested. Defaults to Sheets and Drive access. <code>client_secrets_file</code> <code>str</code> or <code>None</code> Path to OAuth client JSON when using user OAuth. <code>token_cache_file</code> <code>str</code> Location to store the refreshable token. <code>local_server_port</code> <code>int</code> Port used by the OAuth local server. <code>0</code> picks a free port."},{"location":"auth/#get_credentialscfg-authconfig","title":"<code>get_credentials(cfg: AuthConfig)</code>","text":"<p>Resolve credentials using the configured method. For <code>USER_OAUTH</code> it launches the local web server flow and caches the resulting token.</p>"},{"location":"auth/#get_sheets_servicecfg-authconfig","title":"<code>get_sheets_service(cfg: AuthConfig)</code>","text":"<p>Return an authenticated <code>googleapiclient.discovery.Resource</code> for the Sheets API.</p>"},{"location":"auth/#get_drive_servicecfg-authconfig","title":"<code>get_drive_service(cfg: AuthConfig)</code>","text":"<p>Return an authenticated <code>googleapiclient.discovery.Resource</code> for the Drive API.</p>"},{"location":"auth/#useroauthconfig","title":"<code>UserOAuthConfig</code>","text":"<p>Dataclass used by the user OAuth strategy.</p> Field Type Description <code>client_secrets_file</code> <code>str</code> OAuth client secret file. <code>token_cache_file</code> <code>str</code> Where to cache the token. <code>scopes</code> <code>Sequence[str]</code> Scopes requested. <code>local_server_port</code> <code>int</code> Port for the local callback server."},{"location":"auth/#useroauthstrategy","title":"<code>UserOAuthStrategy</code>","text":"<p>Strategy implementing the interactive OAuth flow.</p>"},{"location":"auth/#get_credentials","title":"<code>get_credentials()</code>","text":"<p>Reads cached credentials if present, otherwise acquires a new token and persists the resulting token for reuse.</p>"},{"location":"drive_types/","title":"Drive File Helpers","text":"<p>Utilities for working with Google Drive links stored in sheet cells.</p>"},{"location":"drive_types/#drivefile","title":"<code>DriveFile</code>","text":"<p>Pydantic model representing a file stored in Google Drive.</p> Field Type Description <code>url</code> <code>str | None</code> Original value from the cell. Supports <code>=IMAGE()</code> formulas. <code>file_id</code> <code>str | None</code> Extracted Drive file identifier. <code>local_path</code> <code>str | None</code> Path where the file was downloaded. <code>meta</code> <code>dict</code> Optional metadata returned by the Drive API."},{"location":"worksheet/","title":"Worksheet Interaction","text":"<p>API for representing Google Sheet tabs as typed models and reading/writing row data.</p>"},{"location":"worksheet/#errors-and-annotation-markers","title":"Errors and Annotation Markers","text":""},{"location":"worksheet/#requiredvalueerror","title":"<code>RequiredValueError</code>","text":"<p>Raised when a field marked as required is empty when reading or writing.</p>"},{"location":"worksheet/#gsindex","title":"<code>GSIndex</code>","text":"<p><code>GSIndex(index: int)</code> marks the zero-based column position of a field relative to the worksheet's <code>start_column</code>.</p>"},{"location":"worksheet/#gsrequired","title":"<code>GSRequired</code>","text":"<p>Marks a field as mandatory. Missing values raise <code>RequiredValueError</code> on read and abort writes.</p>"},{"location":"worksheet/#gsparse","title":"<code>GSParse</code>","text":"<p><code>GSParse(func)</code> applies <code>func(value)</code> to a cell before model construction. Useful for custom parsing such as converting strings to numbers or booleans.</p>"},{"location":"worksheet/#gsformat","title":"<code>GSFormat</code>","text":"<p>Defines the desired number format for a column. Example: <code>GSFormat('DATE_TIME', 'dd-MM-yyyy HH:mm')</code>. Apply formats using <code>GoogleWorkSheet.apply_formats_for_model()</code>.</p>"},{"location":"worksheet/#gsreadonly","title":"<code>GSReadonly</code>","text":"<p>Indicates that the field should not be written back to the sheet.</p>"},{"location":"worksheet/#sheetrow","title":"<code>SheetRow</code>","text":"<p>Base class for typed rows. Subclass it and annotate fields with <code>typing.Annotated</code> using the markers above. Instances are bound to a <code>GoogleWorkSheet</code> and row number when read or appended.</p> <p>Support for advanced Google Sheets functionalities (such as chips) will be added in the future. For now, use DriveFile.</p>"},{"location":"worksheet/#properties","title":"Properties","text":"<ul> <li><code>row_number</code> \u2013 absolute row number within the sheet (1-based).</li> <li><code>worksheet</code> \u2013 the <code>GoogleWorkSheet</code> instance the row is bound to.</li> </ul>"},{"location":"worksheet/#methods","title":"Methods","text":"<ul> <li><code>save()</code> \u2013 persist changes for the bound row.</li> <li><code>reload()</code> \u2013 refresh the instance from the sheet.</li> </ul>"},{"location":"worksheet/#googleworksheet","title":"<code>GoogleWorkSheet</code>","text":"<p>Wrapper around a single worksheet (tab) that streams rows as <code>SheetRow</code> instances and writes changes back.</p>"},{"location":"worksheet/#constructor","title":"Constructor","text":"<p><code>GoogleWorkSheet(model, service, spreadsheet_id, sheet_name, *, start_row=2, has_headers=True, start_column=0, require_write=False, drive_service=None)</code></p> Parameter Type Description <code>model</code> <code>Type[SheetRow]</code> The Pydantic row model associated with this sheet. <code>service</code> Sheets <code>Resource</code> Authenticated Sheets API client. <code>spreadsheet_id</code> <code>str</code> ID of the spreadsheet. <code>sheet_name</code> <code>str</code> Name of the worksheet tab. <code>start_row</code> <code>int</code> First row containing data (1-based). <code>has_headers</code> <code>bool</code> Whether the sheet has a header row. <code>start_column</code> <code>int</code> Column offset (0 = column A). <code>require_write</code> <code>bool</code> If <code>True</code>, verify write permissions on initialization. <code>drive_service</code> Drive <code>Resource</code> or <code>None</code> Enables Drive file predownload."},{"location":"worksheet/#methods_1","title":"Methods","text":"<ul> <li><code>rows(*, refresh=False, skip_rows_missing_required=True)</code> \u2192 generator of   row instances. Set <code>refresh=True</code> to re-read the sheet.</li> <li><code>get(row_number, *, use_cache=True, refresh=False, skip_rows_missing_required=True)</code> \u2192 return a specific row or   <code>None</code> when required values are missing.</li> <li><code>saveRow(inst)</code> \u2192 save a row instance or by row number.</li> <li><code>saveRows(rows)</code> \u2192 intended bulk save helper (currently a placeholder).</li> <li><code>clear_cache()</code> \u2192 clear in-memory row cache.</li> <li><code>apply_formats_for_model()</code> \u2192 apply <code>GSFormat</code> markers to all columns.</li> <li><code>write_rows(instances)</code> \u2192 bulk write multiple <code>SheetRow</code> objects. Unbound   rows are appended to the end of the sheet.</li> <li><code>get_last_row_number()</code> \u2192 best-effort detection of the final populated row.</li> </ul>"}]}